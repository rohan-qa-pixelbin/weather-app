{"ast":null,"code":"var _jsxFileName = \"/Users/rohanpatil/Documents/Work/Repos/weather-app copy/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\nimport CurrentLocationDetails from \"./components/CurrentLocationDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst App = () => {\n  _s();\n  const [weatherData] = useState(null);\n  const [favorites, setFavorites] = useState([]);\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n  const fetchWeatherData = city => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n    fetch(url).then(response => response.json()).then(data => {\n      if (data.cod === 200) {\n        setCurrentWeather({\n          location: data.name,\n          temperature: data.main.temp\n        });\n      } else {\n        alert(\"City not found\");\n      }\n    }).catch(error => {\n      console.error(\"Error fetching weather data:\", error);\n    });\n  };\n  const addFavorite = city => {\n    if (!favorites.includes(city)) {\n      setFavorites([...favorites, city]);\n    }\n  };\n  const selectFavorite = city => {\n    fetchWeatherData(city);\n  };\n  const handleRemoveFavorite = city => {\n    setFavorites(favorites.filter(favorite => favorite !== city));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onSearch: fetchWeatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weatherData: weatherData,\n      onAddFavorite: addFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentLocationDetails, {\n      location: currentWeather.location,\n      temperature: currentWeather.temperature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Favorites, {\n      favorites: favorites,\n      onSelectFavorite: selectFavorite,\n      onRemoveFavorite: handleRemoveFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to remove a city from favorites\n\n// Render Favorites component\n_s(App, \"XPxtd0aJZ9oFAIm63eyIFTj15FM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchBox","WeatherCard","Favorites","CurrentLocationDetails","jsxDEV","_jsxDEV","App","_s","weatherData","favorites","setFavorites","currentWeather","setCurrentWeather","apiKey","fetchWeatherData","city","url","fetch","then","response","json","data","cod","location","name","temperature","main","temp","alert","catch","error","console","addFavorite","includes","selectFavorite","handleRemoveFavorite","filter","favorite","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onAddFavorite","onSelectFavorite","onRemoveFavorite","_c","$RefreshReg$"],"sources":["/Users/rohanpatil/Documents/Work/Repos/weather-app copy/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\nimport CurrentLocationDetails from \"./components/CurrentLocationDetails\";;\n\nconst App = () => {\n  const [weatherData,] = useState(null);\n  const [favorites, setFavorites] = useState([]);\nconst [currentWeather, setCurrentWeather] = useState(null);\n  const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n\n  const fetchWeatherData = (city) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.cod === 200) {\n         setCurrentWeather({\n           location: data.name,\n           temperature: data.main.temp,\n         });\n        } else {\n          alert(\"City not found\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching weather data:\", error);\n      });\n  };\n\n  const addFavorite = (city) => {\n    if (!favorites.includes(city)) {\n      setFavorites([...favorites, city]);\n    }\n  };\n\n  const selectFavorite = (city) => {\n    fetchWeatherData(city);\n  };\n\n      const handleRemoveFavorite = (city) => {\n        setFavorites(favorites.filter((favorite) => favorite !== city));\n      };\n    \n  return (\n    <div className=\"container\">\n      <h1>Weather Dashboard</h1>\n      <SearchBox onSearch={fetchWeatherData} />\n      <WeatherCard weatherData={weatherData} onAddFavorite={addFavorite} />\n      {currentWeather && (\n        <CurrentLocationDetails\n          location={currentWeather.location}\n          temperature={currentWeather.temperature}\n        />\n      )}\n      <Favorites\n        favorites={favorites}\n        onSelectFavorite={selectFavorite}\n        onRemoveFavorite={handleRemoveFavorite}\n      />\n    </div>\n  );\n};\n\n// Function to remove a city from favorites\n\n// Render Favorites component\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,sBAAsB,MAAM,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA;AAEzE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,CAAE,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACrC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAMc,MAAM,GAAG,kCAAkC;EAEjD,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjC,MAAMC,GAAG,GAAG,qDAAqDD,IAAI,uBAAuBF,MAAM,EAAE;IAEpGI,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIA,IAAI,CAACC,GAAG,KAAK,GAAG,EAAE;QACrBV,iBAAiB,CAAC;UAChBW,QAAQ,EAAEF,IAAI,CAACG,IAAI;UACnBC,WAAW,EAAEJ,IAAI,CAACK,IAAI,CAACC;QACzB,CAAC,CAAC;MACH,CAAC,MAAM;QACLC,KAAK,CAAC,gBAAgB,CAAC;MACzB;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;EAED,MAAME,WAAW,GAAIjB,IAAI,IAAK;IAC5B,IAAI,CAACN,SAAS,CAACwB,QAAQ,CAAClB,IAAI,CAAC,EAAE;MAC7BL,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEM,IAAI,CAAC,CAAC;IACpC;EACF,CAAC;EAED,MAAMmB,cAAc,GAAInB,IAAI,IAAK;IAC/BD,gBAAgB,CAACC,IAAI,CAAC;EACxB,CAAC;EAEG,MAAMoB,oBAAoB,GAAIpB,IAAI,IAAK;IACrCL,YAAY,CAACD,SAAS,CAAC2B,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,KAAKtB,IAAI,CAAC,CAAC;EACjE,CAAC;EAEL,oBACEV,OAAA;IAAKiC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlC,OAAA;MAAAkC,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BtC,OAAA,CAACL,SAAS;MAAC4C,QAAQ,EAAE9B;IAAiB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzCtC,OAAA,CAACJ,WAAW;MAACO,WAAW,EAAEA,WAAY;MAACqC,aAAa,EAAEb;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpEhC,cAAc,iBACbN,OAAA,CAACF,sBAAsB;MACrBoB,QAAQ,EAAEZ,cAAc,CAACY,QAAS;MAClCE,WAAW,EAAEd,cAAc,CAACc;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACF,eACDtC,OAAA,CAACH,SAAS;MACRO,SAAS,EAAEA,SAAU;MACrBqC,gBAAgB,EAAEZ,cAAe;MACjCa,gBAAgB,EAAEZ;IAAqB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;;AAED;;AAEA;AAAApC,EAAA,CA9DMD,GAAG;AAAA0C,EAAA,GAAH1C,GAAG;AAgET,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}