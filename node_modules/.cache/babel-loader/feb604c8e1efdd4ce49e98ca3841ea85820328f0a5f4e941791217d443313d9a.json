{"ast":null,"code":"var _jsxFileName = \"/Users/rohanpatil/Documents/Work/Repos/weather-app copy/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [favorites, setFavorites] = useState([]);\n  const [currentLocationWeather, setCurrentLocationWeather] = useState(null);\n  const MAX_FAVORITES = 20;\n\n  // useEffect(() => {\n  //   getCurrentLocationWeather();\n  // }, []);\n\n  const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n  const fetchWeatherData = city => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n    fetch(url).then(response => response.json()).then(data => {\n      if (data.cod === 200) {\n        setWeatherData(data);\n      } else {\n        alert(\"City not found\");\n      }\n    }).catch(error => {\n      console.error(\"Error fetching weather data:\", error);\n    });\n  };\n  const getCurrentLocationWeather = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fetchWeatherByCoordinates(latitude, longitude);\n      }, error => {\n        console.error(\"Error getting location:\", error);\n        alert(\"Unable to retrieve your location. Please enter it manually.\");\n      });\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  const fetchWeatherByCoordinates = (lat, lon) => {\n    const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\n    fetch(url).then(response => response.json()).then(data => {\n      if (data.cod === 200) {\n        setCurrentLocationWeather(data);\n      } else {\n        alert(\"Unable to fetch weather for your current location.\");\n      }\n    }).catch(error => console.error(\"Error fetching weather data:\", error));\n  };\n  const addFavorite = city => {\n    if (favorites.length >= MAX_FAVORITES) {\n      alert(\"You can only add a maximum of 20 locations to favorites.\");\n      return;\n    }\n    if (!favorites.includes(city)) {\n      setFavorites([...favorites, city]);\n    }\n  };\n  const selectFavorite = city => {\n    fetchWeatherData(city);\n  };\n  const handleRemoveFavorite = city => {\n    setFavorites(favorites.filter(favorite => favorite !== city));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [currentLocationWeather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-location-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Current Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentLocationWeather.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", currentLocationWeather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", currentLocationWeather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", currentLocationWeather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onSearch: fetchWeatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weatherData: weatherData,\n      onAddFavorite: addFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Favorites, {\n      favorites: favorites,\n      onSelectFavorite: selectFavorite,\n      onRemoveFavorite: handleRemoveFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to remove a city from favorites\n\n// Render Favorites component\n_s(App, \"OwkUZHWhMoqJz8kgTXQm2CjNii8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBox","WeatherCard","Favorites","jsxDEV","_jsxDEV","App","_s","weatherData","setWeatherData","favorites","setFavorites","currentLocationWeather","setCurrentLocationWeather","MAX_FAVORITES","apiKey","fetchWeatherData","city","url","fetch","then","response","json","data","cod","alert","catch","error","console","getCurrentLocationWeather","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fetchWeatherByCoordinates","lat","lon","addFavorite","length","includes","selectFavorite","handleRemoveFavorite","filter","favorite","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","main","temp","humidity","wind","speed","onSearch","onAddFavorite","onSelectFavorite","onRemoveFavorite","_c","$RefreshReg$"],"sources":["/Users/rohanpatil/Documents/Work/Repos/weather-app copy/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\n\n\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState(null);\n    const [favorites, setFavorites] = useState([]);\n    const [currentLocationWeather, setCurrentLocationWeather] = useState(null);\n    const MAX_FAVORITES = 20;\n\n\n    // useEffect(() => {\n    //   getCurrentLocationWeather();\n    // }, []);\n\n  const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n\n  const fetchWeatherData = (city) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.cod === 200) {\n          setWeatherData(data);\n        } else {\n          alert(\"City not found\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching weather data:\", error);\n      });\n  };\n\n     const getCurrentLocationWeather = () => {\n       if (navigator.geolocation) {\n         navigator.geolocation.getCurrentPosition(\n           (position) => {\n             const { latitude, longitude } = position.coords;\n             fetchWeatherByCoordinates(latitude, longitude);\n           },\n           (error) => {\n             console.error(\"Error getting location:\", error);\n             alert(\n               \"Unable to retrieve your location. Please enter it manually.\"\n             );\n           }\n         );\n       } else {\n         alert(\"Geolocation is not supported by your browser.\");\n       }\n     };\n    \n     const fetchWeatherByCoordinates = (lat, lon) => {\n       const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n       const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\n\n       fetch(url)\n         .then((response) => response.json())\n         .then((data) => {\n           if (data.cod === 200) {\n             setCurrentLocationWeather(data);\n           } else {\n             alert(\"Unable to fetch weather for your current location.\");\n           }\n         })\n         .catch((error) =>\n           console.error(\"Error fetching weather data:\", error)\n         );\n     };\n    \n    const addFavorite = (city) => {\n      \nif (favorites.length >= MAX_FAVORITES) {\n  alert(\"You can only add a maximum of 20 locations to favorites.\");\n  return;\n}\n\n    if (!favorites.includes(city)) {\n      setFavorites([...favorites, city]);\n    }\n  };\n\n  const selectFavorite = (city) => {\n    fetchWeatherData(city);\n  };\n\n      const handleRemoveFavorite = (city) => {\n        setFavorites(favorites.filter((favorite) => favorite !== city));\n      };\n    \n  return (\n    <div className=\"container\">\n      {currentLocationWeather && (\n        <div className=\"current-location-weather\">\n          <h3>Your Current Location</h3>\n          <p>{currentLocationWeather.name}</p>\n          <p>Temperature: {currentLocationWeather.main.temp}Â°C</p>\n          <p>Humidity: {currentLocationWeather.main.humidity}%</p>\n          <p>Wind Speed: {currentLocationWeather.wind.speed} m/s</p>\n        </div>\n      )}\n      <h1>Weather Dashboard</h1>\n      <SearchBox onSearch={fetchWeatherData} />\n      <WeatherCard weatherData={weatherData} onAddFavorite={addFavorite} />\n\n      <Favorites\n        favorites={favorites}\n        onSelectFavorite={selectFavorite}\n        onRemoveFavorite={handleRemoveFavorite}\n      />\n    </div>\n  );\n};\n\n// Function to remove a city from favorites\n\n// Render Favorites component\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}