{"ast":null,"code":"var _jsxFileName = \"/Users/rohanpatil/Documents/Work/Repos/weather-app copy/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [favorites, setFavorites] = useState([]);\n  const [currentLocationWeather, setCurrentLocationWeather] = useState(null);\n  const MAX_FAVORITES = 20;\n  useEffect(() => {\n    getCurrentLocationWeather();\n  }, []);\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n  useEffect(() => {\n    const updateCurrentTime = () => {\n      const now = new Date();\n      const hours = now.getHours();\n      const minutes = now.getMinutes().toString().padStart(2, \"0\"); // Adds leading zero\n      const ampm = hours >= 12 ? \"PM\" : \"AM\";\n      const formattedHours = hours % 12 || 12; // Converts 24-hour format to 12-hour format\n      const timeString = `${formattedHours}:${minutes} ${ampm}`;\n      setCurrentTime(timeString);\n    };\n    updateCurrentTime(); // Set initial time\n\n    const intervalId = setInterval(updateCurrentTime, 1000); // Update time every second\n\n    return () => clearInterval(intervalId); // Cleanup interval on component unmount\n  }, []);\n  const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n  const fetchWeatherData = city => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n    fetch(url).then(response => response.json()).then(data => {\n      if (data.cod === 200) {\n        setWeatherData(data);\n      } else {\n        alert(\"City not found\");\n      }\n    }).catch(error => {\n      console.error(\"Error fetching weather data:\", error);\n    });\n  };\n  const getCurrentLocationWeather = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fetchWeatherByCoordinates(latitude, longitude);\n      }, error => {\n        console.error(\"Error getting location:\", error);\n        alert(\"Unable to retrieve your location. Please enter it manually.\");\n      });\n    } else {\n      alert(\"Geolocation is not supported by your browser.\");\n    }\n  };\n  const fetchWeatherByCoordinates = (lat, lon) => {\n    const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\n    fetch(url).then(response => response.json()).then(data => {\n      if (data.cod === 200) {\n        setCurrentLocationWeather(data);\n      } else {\n        alert(\"Unable to fetch weather for your current location.\");\n      }\n    }).catch(error => console.error(\"Error fetching weather data:\", error));\n  };\n  const addFavorite = city => {\n    if (favorites.length >= MAX_FAVORITES) {\n      alert(\"You can only add a maximum of 20 locations to favorites.\");\n      return;\n    }\n    if (!favorites.includes(city)) {\n      setFavorites([...favorites, city]);\n    }\n  };\n  const selectFavorite = city => {\n    fetchWeatherData(city);\n  };\n  const handleRemoveFavorite = city => {\n    setFavorites(favorites.filter(favorite => favorite !== city));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-time\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), currentLocationWeather && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-location\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentLocationWeather.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"place-container\",\n        children: currentLocationWeather.sys.country\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-location-weather\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temprature: \", currentLocationWeather.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Humidity: \", currentLocationWeather.main.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Wind Speed: \", currentLocationWeather.wind.speed, \" m/s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      onSearch: fetchWeatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weatherData: weatherData,\n      onAddFavorite: addFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Favorites, {\n      favorites: favorites,\n      onSelectFavorite: selectFavorite,\n      onRemoveFavorite: handleRemoveFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"X5FmFD7uRfuvQtbEZdDR6MHkz/I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBox","WeatherCard","Favorites","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","weatherData","setWeatherData","favorites","setFavorites","currentLocationWeather","setCurrentLocationWeather","MAX_FAVORITES","getCurrentLocationWeather","currentTime","setCurrentTime","currentDate","setCurrentDate","updateCurrentTime","now","Date","hours","getHours","minutes","getMinutes","toString","padStart","ampm","formattedHours","timeString","intervalId","setInterval","clearInterval","apiKey","fetchWeatherData","city","url","fetch","then","response","json","data","cod","alert","catch","error","console","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fetchWeatherByCoordinates","lat","lon","addFavorite","length","includes","selectFavorite","handleRemoveFavorite","filter","favorite","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","sys","country","main","temp","humidity","wind","speed","onSearch","onAddFavorite","onSelectFavorite","onRemoveFavorite","_c","$RefreshReg$"],"sources":["/Users/rohanpatil/Documents/Work/Repos/weather-app copy/src/App.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\n\n\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState(null);\n    const [favorites, setFavorites] = useState([]);\n    const [currentLocationWeather, setCurrentLocationWeather] = useState(null);\n    const MAX_FAVORITES = 20;\n\n\n    useEffect(() => {\n      getCurrentLocationWeather();\n    }, []);\n\n    const [currentTime, setCurrentTime] = useState(\"\");\n    const [currentDate, setCurrentDate] = useState(\"\");\n    \n\n     useEffect(() => {\n       const updateCurrentTime = () => {\n         const now = new Date();\n         const hours = now.getHours();\n         const minutes = now.getMinutes().toString().padStart(2, \"0\"); // Adds leading zero\n         const ampm = hours >= 12 ? \"PM\" : \"AM\";\n         const formattedHours = hours % 12 || 12; // Converts 24-hour format to 12-hour format\n         const timeString = `${formattedHours}:${minutes} ${ampm}`;\n         setCurrentTime(timeString);\n       };\n\n       updateCurrentTime(); // Set initial time\n\n       const intervalId = setInterval(updateCurrentTime, 1000); // Update time every second\n\n       return () => clearInterval(intervalId); // Cleanup interval on component unmount\n     }, []);\n\n  const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n\n  const fetchWeatherData = (city) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.cod === 200) {\n          setWeatherData(data);\n        } else {\n          alert(\"City not found\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching weather data:\", error);\n      });\n  };\n\n     const getCurrentLocationWeather = () => {\n       if (navigator.geolocation) {\n         navigator.geolocation.getCurrentPosition(\n           (position) => {\n             const { latitude, longitude } = position.coords;\n             fetchWeatherByCoordinates(latitude, longitude);\n           },\n           (error) => {\n             console.error(\"Error getting location:\", error);\n             alert(\n               \"Unable to retrieve your location. Please enter it manually.\"\n             );\n           }\n         );\n       } else {\n         alert(\"Geolocation is not supported by your browser.\");\n       }\n     };\n    \n     const fetchWeatherByCoordinates = (lat, lon) => {\n       const apiKey = \"5ba1ba361346bd0040e36995c3799606\";\n       const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\n\n       fetch(url)\n         .then((response) => response.json())\n         .then((data) => {\n           if (data.cod === 200) {\n             setCurrentLocationWeather(data);\n           } else {\n             alert(\"Unable to fetch weather for your current location.\");\n           }\n         })\n         .catch((error) =>\n           console.error(\"Error fetching weather data:\", error)\n         );\n     };\n    \n    const addFavorite = (city) => {\n      \nif (favorites.length >= MAX_FAVORITES) {\n  alert(\"You can only add a maximum of 20 locations to favorites.\");\n  return;\n}\n\n    if (!favorites.includes(city)) {\n      setFavorites([...favorites, city]);\n    }\n  };\n\n  const selectFavorite = (city) => {\n    fetchWeatherData(city);\n  };\n\n      const handleRemoveFavorite = (city) => {\n        setFavorites(favorites.filter((favorite) => favorite !== city));\n      };\n    \n  return (\n    <div className=\"container\">\n      <div className=\"current-time\">\n        <p>{currentTime}</p>\n      </div>\n      {currentLocationWeather && (\n        <>\n          {/* Separate div for the location name */}\n          <div className=\"current-location\">\n            <h3>{currentLocationWeather.name}</h3>\n          </div>\n          <div className=\"place-container\">\n            {currentLocationWeather.sys.country}\n          </div>\n          <div className=\"current-location-weather\">\n            {/* <p><b>{currentLocationWeather.name}</b></p> */}\n            <p>Temprature: {currentLocationWeather.main.temp}°C</p>\n            <p>Humidity: {currentLocationWeather.main.humidity}%</p>\n            <p>Wind Speed: {currentLocationWeather.wind.speed} m/s</p>\n          </div>\n        </>\n      )}\n      <h1>Weather Dashboard</h1>\n      <SearchBox onSearch={fetchWeatherData} />\n      <WeatherCard weatherData={weatherData} onAddFavorite={addFavorite} />\n\n      <Favorites\n        favorites={favorites}\n        onSelectFavorite={selectFavorite}\n        onRemoveFavorite={handleRemoveFavorite}\n      />\n    </div>\n  );\n};\n\n\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}